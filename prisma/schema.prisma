// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String           @id @default(cuid())
  name                     String?
  email                    String           @unique
  emailVerified            DateTime?
  image                    String?
  password                 String
  verificationToken        String?
  verificationTokenExpires DateTime?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  accounts                 Account[]
  sessions                 Session[]
  tasks                    Task[]           @relation("UserTasks")
  assignedTasks            Task[]           @relation("AssignedTasks")
  projects                 Project[]
  sentConnections          UserConnection[] @relation("SentConnections")
  receivedConnections      UserConnection[] @relation("ReceivedConnections")
  Notification             Notification[]
  sentInvitations          Invitation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    String
  dueDate     DateTime?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  projectId   String?
  assigneeId  String? // Add this line
  user        User       @relation("UserTasks", fields: [userId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String
  startDate   DateTime?
  endDate     DateTime?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tasks       Task[]
}

model UserConnection {
  id         String           @id @default(cuid())
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  senderId   String
  receiverId String
  sender     User             @relation("SentConnections", fields: [senderId], references: [id])
  receiver   User             @relation("ReceivedConnections", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedId String?
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  inviterId String
  inviter   User     @relation(fields: [inviterId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum NotificationType {
  CONNECTION_REQUEST
  TASK_ASSIGNMENT
  PROJECT_UPDATE
  TASK_DUE_SOON
  TASK_OVERDUE
}
